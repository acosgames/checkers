{"version":3,"file":"server.bundle.dev.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sCAAsC;AAC1D;AACA;AACA;AACA,oBAAoB,2CAA2C;AAC/D;AACA;AACA;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjiEAAe,WAAW;;;;;;;;;;;;;;AClNA;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAW;AACnB;AACA;AACA;AACA;AACA,mBAAmB,mDAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAO;AACf;AACA;AACA;AACA,qBAAqB,sDAAW;AAChC;AACA;AACA;AACA,0BAA0B,0DAAe;AACzC;AACA,YAAY,oDAAS;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA,mBAAmB,sDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAQ,GAAG,2DAA2D;AAClF,YAAY,kDAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA,QAAQ,kDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yDAAc;AACvC;AACA,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAW;AACjC;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAO;AACnB;AACA;AACA;AACA;AACA,QAAQ,mDAAQ,GAAG,cAAc;AACjC,QAAQ,oDAAS;AACjB,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B,mBAAmB,mDAAQ;AAC3B,sBAAsB,sDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAO;AACf;AACA,QAAQ,kDAAO;AACf;AACA,QAAQ,mDAAQ,GAAG,aAAa;AAChC,QAAQ,kDAAO;AACf;AACA;AACA;AACA;AACA,QAAQ,uDAAY,GAAG,aAAa;AACpC,QAAQ,mDAAQ,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAY;AACpB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,cAAc;;;;;;UCpd7B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;;;;;;;;ACA0B;AACI;AAC9B;AACA;AACA,iDAAM,0BAA0B,uDAAkB;AAClD,iDAAM,qBAAqB,oDAAe;AAC1C,iDAAM,qBAAqB,oDAAe;AAC1C,iDAAM,sBAAsB,qDAAgB;AAC5C,iDAAM,qBAAqB,oDAAe;AAC1C;AACA,qDAAU,G","sources":["file:///E:\\GitHub\\acos-games\\checkers\\game-server\\acosg.js","file:///E:\\GitHub\\acos-games\\checkers\\game-server\\game.js","file:///webpack/bootstrap","file:///webpack/runtime/define property getters","file:///webpack/runtime/hasOwnProperty shorthand","file:///E:\\GitHub\\acos-games\\checkers\\game-server\\index.js"],"sourcesContent":["\r\nclass ACOSG {\r\n    constructor() {\r\n        try {\r\n            this.actions = JSON.parse(JSON.stringify(globals.actions()));\r\n        }\r\n        catch (e) { this.error('Failed to load actions'); return }\r\n        try {\r\n            this.originalGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load originalGame'); return }\r\n        try {\r\n            this.nextGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load nextGame'); return }\r\n\r\n\r\n        this.currentAction = null;\r\n\r\n        this.isNewGame = false;\r\n        // this.markedForDelete = false;\r\n        this.defaultSeconds = 15;\r\n        // this.nextTimeLimit = -1;\r\n        this.kickedPlayers = [];\r\n\r\n        // if (!this.nextGame || !this.nextGame.rules || Object.keys(this.nextGame.rules).length == 0) {\r\n        //     this.isNewGame = true;\r\n        //     this.error('Missing Rules');\r\n        // }\r\n\r\n        if (this.nextGame) {\r\n            if (!('timer' in this.nextGame)) {\r\n                this.nextGame.timer = {};\r\n            }\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            this.nextGame.events = {};\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    on(type, cb) {\r\n\r\n        // if (type == 'newgame') {\r\n        //     //if (this.isNewGame) {\r\n        //     this.currentAction = this.actions[0];\r\n        //     if (this.currentAction.type == '')\r\n        //         cb(this.actions[0]);\r\n        //     this.isNewGame = false;\r\n        //     //}\r\n\r\n        //     return;\r\n        // }\r\n\r\n        for (var i = 0; i < this.actions.length; i++) {\r\n            if (this.actions[i].type == type) {\r\n                this.currentAction = this.actions[i];\r\n                let result = cb(this.currentAction);\r\n                if (typeof result == \"boolean\" && !result) {\r\n                    this.ignore();\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ignore() {\r\n        globals.ignore();\r\n        return false;\r\n    }\r\n\r\n    setGame(game) {\r\n        for (var id in this.nextGame.players) {\r\n            let player = this.nextGame.players[id];\r\n            game.players[id] = player;\r\n        }\r\n        this.nextGame = game;\r\n    }\r\n\r\n    submit() {\r\n        if (this.kickedPlayers.length > 0)\r\n            this.nextGame.kick = this.kickedPlayers;\r\n\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    gameover(payload) {\r\n        this.event('gameover', payload);\r\n    }\r\n\r\n    log(msg) {\r\n        globals.log(msg);\r\n    }\r\n    error(msg) {\r\n        globals.error(msg);\r\n    }\r\n\r\n    kickPlayer(id) {\r\n        this.kickedPlayers.push(id);\r\n    }\r\n\r\n    database() {\r\n        return globals.database();\r\n    }\r\n\r\n    action() {\r\n        return this.currentAction;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.next = obj;\r\n        }\r\n        return this.nextGame.next;\r\n    }\r\n\r\n    setTimelimit(seconds) {\r\n        seconds = seconds || this.defaultSeconds;\r\n        if (!this.nextGame.timer)\r\n            this.nextGame.timer = {};\r\n        this.nextGame.timer.set = Math.min(10000, Math.max(10, seconds));\r\n    }\r\n\r\n    reachedTimelimit(action) {\r\n        if (typeof action.timeleft == 'undefined')\r\n            return false;\r\n        return action.timeleft <= 0;\r\n    }\r\n\r\n    event(name, payload) {\r\n        if (!payload)\r\n            return this.nextGame.events[name];\r\n\r\n        this.nextGame.events[name] = payload || {};\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = {};\r\n    }\r\n    // events(name) {\r\n    //     if (typeof name === 'undefined')\r\n    //         return this.nextGame.events;\r\n    //     this.nextGame.events.push(name);\r\n    // }\r\n}\r\n\r\nexport default new ACOSG();","import cup from './acosg';\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        board: [\r\n            // [0, 2, 0, 2, 0, 2, 0, 2],\r\n            // [0, 0, 2, 0, 2, 0, 2, 0],\r\n            // [0, 2, 0, 2, 0, 0, 0, 2],\r\n            // [2, 0, 0, 0, 1, 0, 2, 0],\r\n            // [0, 0, 0, 0, 0, 1, 0, 0],\r\n            // [1, 0, 1, 0, 0, 0, 1, 0],\r\n            // [0, 1, 0, 1, 0, 1, 0, 1],\r\n            // [1, 0, 0, 0, 1, 0, 1, 0]\r\n            // [0, 0, 0, 2, 0, 2, 0, 0], [2, 0, 0, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2], [2, 0, 0, 0, 0, 0, 2, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 4, 0], [0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0]\r\n\r\n            [0, 2, 0, 2, 0, 2, 0, 2], //white\r\n            [2, 0, 2, 0, 2, 0, 2, 0],\r\n            [0, 2, 0, 2, 0, 2, 0, 2],\r\n            [0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 0, 0],\r\n            [1, 0, 1, 0, 1, 0, 1, 0],\r\n            [0, 1, 0, 1, 0, 1, 0, 1],\r\n            [1, 0, 1, 0, 1, 0, 1, 0], //black\r\n        ]\r\n    },\r\n    players: {},\r\n    next: {},\r\n    events: {}\r\n}\r\n\r\nclass Checkers {\r\n\r\n    onNewGame(action) {\r\n        cup.setGame(defaultGame);\r\n        this.newRound();;\r\n    }\r\n\r\n    onSkip(action) {\r\n        let next = cup.next();\r\n        if (!next || !next.id)\r\n            return;\r\n\r\n        this.playerLeave(next.id);\r\n    }\r\n\r\n    onJoin(action) {\r\n        cup.log(action);\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        let player = cup.players(action.user.id);\r\n        player.rank = 2;\r\n        player.score = 0;\r\n\r\n        let playerCount = cup.playerCount();\r\n        if (playerCount <= 2) {\r\n            cup.event('join', {\r\n                id: action.user.id\r\n            });\r\n        }\r\n    }\r\n\r\n    onLeave(action) {\r\n        this.playerLeave(action.user.id);\r\n    }\r\n\r\n    playerLeave(id) {\r\n        let players = cup.players();\r\n        let player = players[id];\r\n\r\n        let otherType = this.getOppositeType(player.type);\r\n        let otherId = this.getPlayerIdFromType(otherType);\r\n\r\n        this.setWinner(otherId, 'forfeit')\r\n\r\n    }\r\n\r\n    onMove(action) {\r\n        let state = cup.state();\r\n        let id = action.user.id;\r\n        let user = cup.players(id);\r\n\r\n\r\n        let from = action.payload.from;\r\n        let dir = action.payload.dir;\r\n        let kill;\r\n\r\n        let x = from[0];\r\n        let y = from[1];\r\n        let next = cup.next();\r\n\r\n        //if the previous move is part of a chain,\r\n        // force the user to play one of the moves\r\n        if (next.pos) {\r\n            let rx = next.pos[0];\r\n            let ry = next.pos[1];\r\n\r\n            if (rx != x && ry != y) {\r\n                cup.ignore();\r\n                return false;\r\n            }\r\n\r\n            let isValidDirection = false;\r\n            if (Array.isArray(next.dirs))\r\n                for (var i = 0; i < next.dirs.length; i++) {\r\n                    if (dir == next.dirs[i])\r\n                        isValidDirection = true;\r\n                }\r\n\r\n            if (!isValidDirection) {\r\n                cup.ignore();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!this.processValidMove(action.user.id, user, from, dir)) {\r\n            cup.ignore();\r\n            return false;\r\n        }\r\n\r\n        if (user.score >= 12) {\r\n            this.setWinner(action.user.id, 'winner');\r\n            return true;\r\n        }\r\n\r\n        cup.setTimelimit(30);\r\n        // this.selectNextPlayer(action.user.id);\r\n        // cup.event('move', {\r\n        //     id, from, dir\r\n        // });\r\n    }\r\n\r\n\r\n    /**\r\n     * Validation Checks\r\n     * 0. Check if user owns the cell\r\n     * 1. Check blocked\r\n     * 2. Check diagonal move\r\n     * 3. Check jump over opponent into empty spot\r\n     * 4. Check lands on touchdown\r\n     * \r\n     * Left Up Diagonal\r\n     * x=(x-1); y=(y-1);\r\n     * Right Up Diagonal\r\n     * x=(x+1); y=(y-1);\r\n     * Left Down Diagonal\r\n     * x=(x-1); y=(y+1);\r\n     * Right Down Diagonal\r\n     * x=(x+1); y=(y+1);\r\n     * \r\n     * @param {[x,y]} from \r\n     * @param {[x,y]} to \r\n     */\r\n    processValidMove(userid, user, from, dir, isChain) {\r\n\r\n        let state = cup.state();\r\n\r\n        let x = from[0];\r\n        let y = from[1];\r\n        let cell = this.getCell(x, y)\r\n\r\n        if (!isChain && !this.checkUserOwnsCell(user.type, cell))\r\n            return false;\r\n\r\n        if (isChain && cell != 0)\r\n            return false;\r\n\r\n        if (!isChain && !this.checkValidAction(cell, dir))\r\n            return false;\r\n\r\n        if (isChain && !this.checkValidAction(isChain, dir))\r\n            return false;\r\n\r\n        let cellTo = this.actionToCell(from[0], from[1], dir);\r\n        if (cellTo == null)\r\n            //invalid move \r\n            return false;\r\n\r\n        let to = this.actionToCoords(from[0], from[1], dir);\r\n        let otherType = this.getTypeFromCell(cellTo);\r\n        if (!otherType && !isChain) {\r\n            //clear out previous cell \r\n            state.board[x][y] = 0;\r\n\r\n            //move to next cell\r\n            state.board[to.x][to.y] = cell;\r\n\r\n            //check if we need to king the cell\r\n            this.processNewKing(to);\r\n\r\n            //empty cell, allow move\r\n            this.selectNextPlayer(user.type);\r\n            return true;\r\n        }\r\n\r\n        if (!otherType && isChain)\r\n            return false;\r\n\r\n        if (otherType == user.type) {\r\n            return false;\r\n        }\r\n\r\n        //perform action one more time to see if we can jump over\r\n        let cellFinal = this.actionToCell(to.x, to.y, dir);\r\n        let finalType = this.getTypeFromCell(cellFinal);\r\n\r\n        cup.log('finalType =  ' + finalType);\r\n\r\n        if (finalType)\r\n            //the checker item is blocked\r\n            return false;\r\n\r\n        let coords = this.actionToCoords(to.x, to.y, dir);\r\n\r\n        if (isChain) {\r\n            if (cellFinal == 0)\r\n                return dir;\r\n            return false;\r\n        }\r\n\r\n\r\n        //run before we change the cells\r\n        //check all the directions\r\n        // if another eat is possible, let user go again\r\n        let hasAnotherMove = false;\r\n        let requiredMove = [];\r\n        for (var i = 1; i <= 4; i++) {\r\n            let attempt = this.processValidMove(userid, user, [coords.x, coords.y], i, cell);\r\n            if (attempt) {\r\n                requiredMove.push(attempt);\r\n                hasAnotherMove = true;\r\n            }\r\n        }\r\n\r\n        if (requiredMove.length > 0) {\r\n            cup.next({ id: userid, pos: [coords.x, coords.y], dirs: requiredMove })\r\n            cup.log(\"Has Another move: \" + userid);\r\n        }\r\n\r\n        //no more moves, let next player go\r\n        else {\r\n            this.selectNextPlayer(user.type);\r\n        }\r\n\r\n\r\n        //we successfully ate the opponent\r\n        //set their cell to 0\r\n        //give score point to user\r\n\r\n        //clear the previous location\r\n        state.board[x][y] = 0;\r\n\r\n        //eat the opponent piece\r\n        state.board[to.x][to.y] = 0;\r\n\r\n        //set the cell of final location\r\n        state.board[coords.x][coords.y] = cell;\r\n\r\n        this.processNewKing(coords);\r\n\r\n        // cup.log(\"Start Pos: \" + JSON.stringify({ x, y }));\r\n        // cup.log(\"Opponent Pos: \" + JSON.stringify(to));\r\n        // cup.log(\"Final Pos: \" + JSON.stringify(coords));\r\n        user.score += 1;\r\n\r\n        cup.log(\"Player Moved: \" + JSON.stringify(user));\r\n\r\n\r\n        //check if we can eat another cell\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    processNewKing(coords) {\r\n        let state = cup.state();\r\n        let cell = this.getCell(coords.x, coords.y);\r\n        //B reaches the top of the board\r\n        if (cell == 1) {\r\n            if (coords.x == 0) {\r\n                state.board[coords.x][coords.y] = 3;\r\n            }\r\n        }\r\n        //W reaches bottom of the board\r\n        else if (cell == 2) {\r\n            if (coords.x == 7) {\r\n                state.board[coords.x][coords.y] = 4;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    checkValidAction(cell, action) {\r\n        //black starters can only go up\r\n        if (cell == 1) {\r\n            if (action != 1 && action != 2)\r\n                return false;\r\n        }\r\n        //white starters can only go down\r\n        else if (cell == 2) {\r\n            if (action != 3 && action != 4)\r\n                return false;\r\n        }\r\n\r\n        //everything else is fair game\r\n        return true;\r\n    }\r\n\r\n    getPlayerIdFromType(type) {\r\n        let players = cup.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            if (player?.type == type)\r\n                return id;\r\n        }\r\n\r\n\r\n    }\r\n    getTypeFromCell(cell) {\r\n        if (cell == 1 || cell == 3)\r\n            return 'B';\r\n        if (cell == 2 || cell == 4)\r\n            return 'W';\r\n        return null;\r\n    }\r\n\r\n    getOppositeType(type) {\r\n        return type == 'B' ? 'W' : 'B';\r\n    }\r\n\r\n    checkUserOwnsCell(type, cell) {\r\n        if (type == 'B') {\r\n            if (cell != 1 && cell != 3) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (type == 'W') {\r\n            if (cell != 2 && cell != 4) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getCell = (x, y) => {\r\n        let state = cup.state();\r\n        if (x < 0 || x >= 8 || y < 0 || y >= 8)\r\n            return null;\r\n        return state.board[x][y];\r\n    }\r\n\r\n    actionToCoords = (x, y, action) => {\r\n\r\n        var coords = { x, y };\r\n        switch (action) {\r\n            case 1: //left up\r\n                coords = { x: (x - 1), y: (y - 1) }\r\n                break;\r\n            case 2: //right up\r\n                coords = { x: (x - 1), y: (y + 1) }\r\n                break;\r\n            case 3: //left down\r\n                coords = { x: (x + 1), y: (y - 1) }\r\n                break;\r\n            case 4: //right down\r\n                coords = { x: (x + 1), y: (y + 1) }\r\n                break;\r\n        }\r\n        coords.action = action;\r\n        return coords;\r\n    }\r\n\r\n    actionToCell = (x, y, action) => {\r\n        switch (action) {\r\n            case 1: //left up\r\n                return this.leftUpDiagonal(x, y)\r\n            case 2: //right up\r\n                return this.rightUpDiagonal(x, y)\r\n            case 3: //left down\r\n                return this.leftDownDiagonal(x, y)\r\n            case 4: //right down\r\n                return this.rightDownDiagonal(x, y)\r\n        }\r\n    }\r\n\r\n    leftUpDiagonal = (x, y) => {\r\n        return this.getCell(x - 1, y - 1);\r\n    }\r\n    rightUpDiagonal = (x, y) => {\r\n        return this.getCell(x - 1, y + 1);\r\n    }\r\n    leftDownDiagonal = (x, y) => {\r\n        return this.getCell(x + 1, y - 1);\r\n    }\r\n    rightDownDiagonal = (x, y) => {\r\n        return this.getCell(x + 1, y + 1);\r\n    }\r\n\r\n    newRound() {\r\n        let playerList = cup.playerList();\r\n\r\n        let state = cup.state();\r\n        //select the starting player\r\n\r\n        let randomPlayerID = Math.floor(Math.random() * playerList.length);\r\n        state.sx = playerList[randomPlayerID];\r\n\r\n\r\n        //set the starting player, and set type for other player\r\n        let players = cup.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            player.rank = 2;\r\n            player.score = 0;\r\n            player.type = 'W';\r\n            cup.log(id + ' ' + JSON.stringify(player));\r\n        }\r\n\r\n        players[state.sx].type = 'B';\r\n\r\n        cup.next({ id: state.sx });\r\n        cup.event('newround', true);\r\n        cup.setTimelimit(30);\r\n    }\r\n\r\n    findNextPlayer() {\r\n        let state = cup.state();\r\n        let next = cup.next();\r\n        let players = cup.players();\r\n        let current = players[next.id];\r\n        let otherType = this.getOppositeType(current.type);\r\n        let otherId = this.getPlayerIdFromType(otherType);\r\n        return otherId;\r\n    }\r\n\r\n    selectNextPlayer(type) {\r\n        cup.log(\"Current Type: \" + type);\r\n        let otherType = this.getOppositeType(type);\r\n        cup.log(\"Other Type: \" + otherType);\r\n        let otherId = this.getPlayerIdFromType(otherType);\r\n        cup.next({ id: otherId });\r\n        cup.log(\"Next PLayer: \" + otherId);\r\n    }\r\n\r\n\r\n    setTie() {\r\n        cup.gameover({ type: 'tie' })\r\n        cup.next({});\r\n    }\r\n\r\n    // set the winner event and data   \r\n    setWinner(playerid, type) {\r\n        //find user who matches the win type  \r\n        let player = cup.players(playerid);\r\n        if (!player) {\r\n            player = {}\r\n            player.id = 'unknown player';\r\n        }\r\n\r\n        player.rank = 1;\r\n\r\n        cup.gameover({\r\n            type,\r\n            id: playerid\r\n        });\r\n    }\r\n}\r\n\r\nexport default new Checkers();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import cup from './acosg';\r\nimport checkers from './game';\r\n\r\n\r\ncup.on('gamestart', (action) => checkers.onNewGame(action));\r\ncup.on('skip', (action) => checkers.onSkip(action));\r\ncup.on('join', (action) => checkers.onJoin(action));\r\ncup.on('leave', (action) => checkers.onLeave(action));\r\ncup.on('move', (action) => checkers.onMove(action));\r\n\r\ncup.submit();"],"names":[],"sourceRoot":""}